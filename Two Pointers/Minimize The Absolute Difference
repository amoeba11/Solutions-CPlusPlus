/*

Given three sorted arrays A, B and Cof not necessarily same sizes.

Calculate the minimum absolute difference between the maximum and minimum number from the triplet a, b, c such that a, b, c belongs arrays A, B, C respectively.
i.e. minimize | max(a,b,c) - min(a,b,c) |.

Example :

Input:

A : [ 1, 4, 5, 8, 10 ]
B : [ 6, 9, 15 ]
C : [ 2, 3, 6, 6 ]

Output:

1

Explanation: We get the minimum difference for a=5, b=6, c=6 as | max(a,b,c) - min(a,b,c) | = |6-5| = 1.

*/

int Solution::solve(vector<int> &A, vector<int> &B, vector<int> &C) {
    int n1=A.size();
    int n2=B.size();
    int n3=C.size();
    int a=n1-1;
    int b=n2-1;
    int c=n3-1;
    int diff=INT_MAX;
    while(a!=-1 && b!=-1 && c!=-1)
    {
        int curdif = abs(max(A[a],max(B[b],C[c]))-min(A[a],min(B[b],C[c])));
        if(curdif<diff) diff=curdif;
        int maxterm = max(A[a],max(B[b],C[c]));
        if(maxterm == A[a]) a--;
        else if(maxterm == B[b]) b--;
        else c--;
    }
    return diff;
}
