/*

You are given 3 arrays A, B and C. All 3 of the arrays are sorted.

Find i, j, k such that :
max(abs(A[i] - B[j]), abs(B[j] - C[k]), abs(C[k] - A[i])) is minimized.
Return the minimum max(abs(A[i] - B[j]), abs(B[j] - C[k]), abs(C[k] - A[i]))

**abs(x) is absolute value of x and is implemented in the following manner : **

      if (x < 0) return -x;
      else return x;

Example :

Input : 
        A : [1, 4, 10]
        B : [2, 15, 20]
        C : [10, 12]

Output : 5 
         With 10 from A, 15 from B and 10 from C. 

*/

int Solution::minimize(const vector<int> &A, const vector<int> &B, const vector<int> &C) {
    int n1=A.size();
    int n2=B.size();
    int n3=C.size();
    int i=n1-1;
    int j=n2-1;
    int k=n3-1;
    int ans=INT_MAX;
    int n=max(n1,max(n2,n3));
    while(i>=0 && j>=0 && k>=0)
    {
        int cmax=max(abs(A[i] - B[j]), max(abs(B[j] - C[k]), abs(C[k] - A[i])));
        if(cmax<ans) ans=cmax;
        if(cmax==abs(A[i] - B[j]))
        {
            if(A[i]>B[j]) i--;
            else j--;
        }
        else if(cmax==abs(B[j] - C[k]))
        {
            if(B[j]>C[k]) j--;
            else k--;
        }
        else
        {
            if(C[k]>A[i]) k--;
            else i--;
        }
    }
    return ans;
}
