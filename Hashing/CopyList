/*

A linked list is given such that each node contains an additional random pointer which could point to any node in the list or NULL.

Return a deep copy of the list.

Example

Given list

   1 -> 2 -> 3

with random pointers going from

  1 -> 3
  2 -> 1
  3 -> 1

You should return a deep copy of the list. The returned answer should not contain the same node as the original list, but a copy of them. The pointers in the returned list should not link to any node in the original input list.

*/

/**
 * Definition for singly-linked list.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 
 */
 
RandomListNode* Solution::copyRandomList(RandomListNode* A) {
    if(A==NULL) return NULL;
    RandomListNode * head1 = A;
    RandomListNode* cloned = new RandomListNode(A->label);
    RandomListNode* ans = cloned;
    RandomListNode* head = A->next;
    map< RandomListNode*, RandomListNode* > mp;
    mp.insert({head1,cloned});
    RandomListNode* temp;
    while(head!=NULL)
    {
//    cout<<"adshf1";
        temp = new RandomListNode(head->label);
        cloned->next=temp;
        cloned=cloned->next;
        mp.insert({head,cloned});
        head=head->next;
    }
//    cout<<"adshf2";
    head=A;
    while(head!=NULL)
    {
//   cout<<"adshf3";    
        if(mp.find(head)==mp.end())
        {
            mp[head]->random=NULL;
        }
        else
        {
            mp[head]->random = mp[head->random];
        }
        head=head->next;
    }
//    cout<<"adshf4";
    return ans;
}
